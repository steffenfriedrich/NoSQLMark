akka {
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	log-dead-letters = 0
	loglevel = "DEBUG"
	log-config-on-start = off

	extensions = [
		"akka.cluster.client.ClusterClientReceptionist"
		, "akka.cluster.pubsub.DistributedPubSub"
	]

	debug {
		autoreceive = off
		lifecycle = off
		fsm = off
		event-stream = off
	}

	cluster {
		seed-nodes = [
			"akka.tcp://NoSQLMarkCluster@127.0.0.1:2552"
		]
		roles = ["backbench"]
		auto-down-unreachable-after = 120s
	}

	actor {
		provider = "akka.cluster.ClusterActorRefProvider"

		default-dispatcher {
			# Throughput for default Dispatcher, set to 1 for as fair as possible
			# throughput = 10
		}

		deployment {
			/clustermaster/singleton/workermasterouter  {
				router = round-robin-pool
				cluster {
					enabled = on
					max-nr-of-instances-per-node = 1
					allow-local-routees = on
					use-role = compute
				}
			}
		}

		serializers {
			java = "akka.serialization.JavaSerializer"
			kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
		}
		serialization-bindings {
			"scala.collection.immutable.HashMap$HashTrieMap" = kryo
			"scala.collection.immutable.Map$Map1" = kryo
			"scala.collection.immutable.Map$Map2" = kryo
			"scala.collection.immutable.Map$Map3" = kryo
			"scala.collection.immutable.Map$Map4" = kryo
			"de.unihamburg.informatik.nosqlmark.api.Job" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CoreJob" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CoreCounts" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CoreProportions" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CoreDistributions" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CoreLoadGeneration" = kryo
			"de.unihamburg.informatik.nosqlmark.api.StalenessJob" = kryo
			"de.unihamburg.informatik.nosqlmark.api.StalenessCounts" = kryo
			"de.unihamburg.informatik.nosqlmark.api.StalenessProportions" = kryo
			"de.unihamburg.informatik.nosqlmark.api.StalenessDistributions" = kryo
			"de.unihamburg.informatik.nosqlmark.api.JobResult" = kryo
			"de.unihamburg.informatik.nosqlmark.api.JobFailure" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Ack" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Recurrence" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Ping$" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Pong$" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$NotOk$" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$StopJob" = kryo
			"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$StoppedJob" = kryo
			"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$StatusReport" = kryo
			"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$StartReporting" = kryo
			"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$CleanUpReport" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$RegisterMaster" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$MasterRequestsJob" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobInitialized" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobIsDone" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobFailed" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$SetID" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobIsReady" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$RunJob$" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobRestart$" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$AggregatedMeasurements" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$StartMeasurement" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$FinishMeasurement" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$MeasurementFailed" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$OpsDone" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$Measure" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$WarmUpIsDone" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$CleanUpMeasurements" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$Histograms" = kryo
			"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$OpsAcked" = kryo
		}
		kryo {
			implicit-registration-logging = false
			kryo-trace = false

			idstrategy = "incremental"

			mappings {
				"scala.collection.immutable.HashMap$HashTrieMap" = 30,
				"scala.collection.immutable.Map$Map4" = 31,
			}

			classes = [
				"scala.collection.immutable.HashMap$HashTrieMap",
				"scala.collection.immutable.Map$Map1",
				"scala.collection.immutable.Map$Map2",
				"scala.collection.immutable.Map$Map3",
				"scala.collection.immutable.Map$Map4",
				"de.unihamburg.informatik.nosqlmark.api.Job",
        "de.unihamburg.informatik.nosqlmark.api.CoreJob",
				"de.unihamburg.informatik.nosqlmark.api.CoreCounts",
				"de.unihamburg.informatik.nosqlmark.api.CoreProportions",
				"de.unihamburg.informatik.nosqlmark.api.CoreDistributions",
				"de.unihamburg.informatik.nosqlmark.api.CoreLoadGeneration",
				"de.unihamburg.informatik.nosqlmark.api.StalenessJob",
				"de.unihamburg.informatik.nosqlmark.api.StalenessCounts",
				"de.unihamburg.informatik.nosqlmark.api.StalenessProportions",
				"de.unihamburg.informatik.nosqlmark.api.StalenessDistributions",
				"de.unihamburg.informatik.nosqlmark.api.JobResult",
				"de.unihamburg.informatik.nosqlmark.api.JobFailure",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Ack",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Recurrence",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Ping$",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$Pong$",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$NotOk$",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$StopJob",
				"de.unihamburg.informatik.nosqlmark.api.CommonProtocol$StoppedJob",
				"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$StatusReport",
				"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$StartReporting",
				"de.unihamburg.informatik.nosqlmark.api.ReportingProtocol$CleanUpReport",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$RegisterMaster",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$MasterRequestsJob",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobInitialized",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobIsDone",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobFailed",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$SetID",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobIsReady",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$RunJob$",
				"de.unihamburg.informatik.nosqlmark.protocols.ClusterProtocol$JobRestart$",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$AggregatedMeasurements",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$StartMeasurement",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$FinishMeasurement",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$MeasurementFailed",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$OpsDone",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$Measure",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$WarmUpIsDone",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$CleanUpMeasurements",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$Histograms",
				"de.unihamburg.informatik.nosqlmark.protocols.MeasurementProtocol$OpsAcked"
			]
		}
	}

	singleton {
		# The actor name of the child singleton actor.
		singleton-name = "backbench"

		# Singleton among the nodes tagged with specified role.
		# If the role is not specified it's a singleton among all nodes in the cluster.
		role = "backbench"

		# When a node is becoming oldest it sends hand-over request to previous oldest,
		# that might be leaving the cluster. This is retried with this interval until
		# the previous oldest confirms that the hand over has started or the previous
		# oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
		hand-over-retry-interval = 1s
	}

	testconductor.barrier-timeout = 480s


	remote {
		netty.tcp {
			// change to <external ip>
			hostname = "127.0.0.1"
			// change to <internal ip>
			bind-hostname = "127.0.0.1"
		}
		log-remote-lifecycle-events = off
		log-sent-messages = off
		log-received-messages = off
	}

	testconductor.barrier-timeout = 480s
}

pinned-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}